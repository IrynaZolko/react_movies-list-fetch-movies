{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api/movies.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","getMovie","title","a","fetch","response","json","Response","Error","FindMovie","addNewMovie","useState","setMovie","isMovieInList","setMovieInList","setTitle","isError","setError","searchMovie","localeCompare","undefined","trim","foundMovie","htmlFor","type","value","id","placeholder","classNames","onChange","event","target","onClick","App","setMovies","newMovie","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b0eaeb6.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","const API_URL = 'https://www.omdbapi.com/?apikey=';\nconst myKey = 'e8e80aa3';\n\nexport const getMovie = async (title: string): Promise<Movie> => {\n  const response = await fetch(`${API_URL}${myKey}&t=${title}`);\n  const movie = await response.json();\n\n  if (movie.Response === 'False') {\n    throw new Error('Movie is not found');\n  }\n\n  return movie;\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\n\nimport { getMovie } from '../../api/movies';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  addNewMovie: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ addNewMovie }) => {\n  const [movie, setMovie] = useState({} as Movie);\n  const [isMovieInList, setMovieInList] = useState(false);\n\n  const [title, setTitle] = useState('');\n\n  const [isError, setError] = useState(false);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setError(false);\n  };\n\n  const searchMovie = async () => {\n    if (!isMovieInList || movie.Title.localeCompare(title, undefined)) {\n      try {\n        const foundMovie = await getMovie(title.trim());\n\n        setMovie(foundMovie);\n        setMovieInList(true);\n      } catch (error) {\n        setError(true);\n      }\n    }\n  };\n\n  const addMovieToList = () => {\n    addNewMovie(movie);\n\n    setTitle('');\n    setMovieInList(false);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n            <div className=\"control\">\n              <input\n                type=\"text\"\n                value={title}\n                id=\"movie-title\"\n                placeholder=\"Enter a title to search\"\n                className={classNames('input', { 'is-danger': isError })}\n                onChange={handleChange}\n              />\n            </div>\n          </label>\n\n          {isError && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={searchMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={addMovieToList}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {isMovieInList && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\ntype Props = {};\n\nexport const App: React.FC<Props> = () => {\n  const [movies, setMovies] = useState([] as Movie[]);\n\n  const addNewMovie = (newMovie: Movie) => {\n    if (!movies.some(movie => movie.imdbID === newMovie.imdbID)) {\n      setMovies([...movies, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addNewMovie={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}